#!/bin/bash

echo "üîÑ Testando Load Balancing - Kong Gateway"
echo "========================================"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para extrair servidor da resposta
extract_server() {
    local response="$1"
    echo "$response" | jq -r '.server // .server_info.server // "desconhecido"' 2>/dev/null
}

# Fun√ß√£o para extrair linguagem da resposta
extract_language() {
    local response="$1"
    echo "$response" | jq -r '.language // "Go"' 2>/dev/null
}

echo "1Ô∏è‚É£  Verificando status do Kong e servi√ßos centralizados:"
echo "--------------------------------------------------------"

echo -n "üåê Kong Gateway (porta 8000): "
kong_response=$(curl -s http://localhost:8001/status)
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Online${NC}"
else
    echo -e "${RED}‚ùå Offline${NC}"
    echo "‚ùó Execute os servi√ßos mock centralizados primeiro:"
    echo "   cd ../00-mock-services && docker compose up -d"
    exit 1
fi

echo -n "ÔøΩ Servi√ßos Mock (atrav√©s do Kong): "
test_response=$(curl -s http://localhost:8000/api/health)
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Online${NC}"
else
    echo -e "${RED}‚ùå Offline${NC}"
    echo "‚ùó Verifique se os servi√ßos centralizados est√£o rodando:"
    echo "   cd ../00-mock-services && docker compose ps"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£  Verificando Kong Upstream Health:"
echo "--------------------------------------"
upstream_health=$(curl -s http://localhost:8001/upstreams/api-upstream/health)
healthy_count=$(echo "$upstream_health" | jq '[.data[] | select(.health == "HEALTHY")] | length' 2>/dev/null)
total_count=$(echo "$upstream_health" | jq '.data | length' 2>/dev/null)

echo "Targets saud√°veis: ${healthy_count}/${total_count}"
echo "$upstream_health" | jq -r '.data[] | "Target: \(.target) - Status: \(.health) - Weight: \(.weight)"' 2>/dev/null

echo ""
echo "3Ô∏è‚É£  Testando Load Balancing (20 requisi√ß√µes):"
echo "----------------------------------------------"

go_count=0
node_count=0
total_requests=20

for i in $(seq 1 $total_requests); do
    response=$(curl -s http://localhost:8000/api/health)
    server=$(extract_server "$response")
    language=$(extract_language "$response")
    
    # Incrementar contador do servidor
    if [[ "$server" == "go-mock-api-1" ]]; then
        go_count=$((go_count + 1))
        echo -n -e "${BLUE}G${NC}"
    elif [[ "$server" == "node-mock-api-2" ]]; then
        node_count=$((node_count + 1))
        echo -n -e "${YELLOW}N${NC}"
    else
        echo -n "?"
    fi
    
    # Pequena pausa para ver o balanceamento
    sleep 0.1
done

echo ""
echo ""
echo "4Ô∏è‚É£  Resultados do Load Balancing:"
echo "--------------------------------"

if [ $go_count -gt 0 ]; then
    go_percentage=$((go_count * 100 / total_requests))
    echo -e "üêπ ${BLUE}go-mock-api-1${NC}: $go_count requisi√ß√µes ($go_percentage%)"
fi

if [ $node_count -gt 0 ]; then
    node_percentage=$((node_count * 100 / total_requests))
    echo -e "üü® ${YELLOW}node-mock-api-2${NC}: $node_count requisi√ß√µes ($node_percentage%)"
fi

echo ""
echo "5Ô∏è‚É£  Teste de Performance Comparativa:"
echo "-------------------------------------"

echo "üêπ Testando Go service..."
go_time=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:8000/api/posts)
echo "Go: ${go_time}s"

echo "üü® Testando Node.js service..."
# For√ßar Node.js fazendo m√∫ltiplas requisi√ß√µes at√© acertar
for attempt in {1..10}; do
    response=$(curl -s http://localhost:8000/api/posts)
    server=$(echo "$response" | jq -r '.[0].server_info.server // .[0].server_info // "unknown"' 2>/dev/null)
    if [[ "$server" == "node-mock-api-2" ]]; then
        node_time=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:8000/api/posts)
        echo "Node.js: ${node_time}s"
        break
    fi
done

echo ""
echo "6Ô∏è‚É£  Resumo:"
echo "----------"
echo -e "${GREEN}‚úÖ Load Balancing est√° funcionando corretamente!${NC}"
echo "‚Ä¢ Algoritmo: Round Robin"
echo "‚Ä¢ Peso: 50/50 entre Go e Node.js"
echo "‚Ä¢ Ambos os servi√ßos est√£o saud√°veis"
echo ""
echo "üîç Legenda dos indicadores:"
echo -e "   ${BLUE}G${NC} = Requisi√ß√£o atendida pelo servi√ßo Go"
echo -e "   ${YELLOW}N${NC} = Requisi√ß√£o atendida pelo servi√ßo Node.js"