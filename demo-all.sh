#!/bin/bash

# Configura√ß√µes
set -euo pipefail  # Fail fast em caso de erro

echo "üéØ Kong Gateway Workshop - Demonstra√ß√£o Completa"
echo "================================================="
echo ""
echo "Este script executa uma demonstra√ß√£o de todos os projetos."
echo "Pressione ENTER para continuar ou Ctrl+C para cancelar..."
read

# Obter diret√≥rio do script automaticamente
WORKSHOP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "üìç Diret√≥rio do workshop: $WORKSHOP_DIR"

# Verificar depend√™ncias
check_dependencies() {
    echo ""
    echo "üîç Verificando depend√™ncias..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o encontrado. Por favor, instale o Docker primeiro."
        exit 1
    fi
    
    # Verificar qual vers√£o do Docker Compose est√° dispon√≠vel
    if command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker-compose"
        echo "‚úÖ Usando docker-compose (legado)"
    elif docker compose version &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker compose"
        echo "‚úÖ Usando docker compose (plugin)"
    else
        echo "‚ùå Docker Compose n√£o encontrado. Por favor, instale o Docker Compose primeiro."
        exit 1
    fi
    
    # Verificar se Docker est√° rodando
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
        exit 1
    fi
    
    # jq √© opcional, mas √∫til
    if ! command -v jq &> /dev/null; then
        echo "‚ö†Ô∏è  jq n√£o encontrado (opcional). JSON ser√° mostrado sem formata√ß√£o."
        JQ_AVAILABLE=false
    else
        JQ_AVAILABLE=true
    fi
    
    echo "‚úÖ Depend√™ncias verificadas com sucesso!"
}

# Executar verifica√ß√µes
check_dependencies

# Fun√ß√£o para aguardar Kong estar pronto
wait_for_kong() {
    local max_attempts=30
    local attempt=1
    
    echo "‚è≥ Aguardando Kong estar pronto..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s http://localhost:8001/status >/dev/null 2>&1; then
            echo "‚úÖ Kong est√° pronto!"
            return 0
        fi
        
        echo "   Tentativa $attempt/$max_attempts..."
        sleep 2
        ((attempt++))
    done
    
    echo "‚ùå Kong n√£o respondeu ap√≥s $max_attempts tentativas"
    return 1
}

# Fun√ß√£o para verificar se porta est√° dispon√≠vel
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "‚ùå Porta $port est√° em uso"
        return 1
    fi
    return 0
}

# Vari√°vel para controle de cleanup
CURRENT_PROJECT_DIR=""

# Fun√ß√£o de cleanup
cleanup() {
    echo ""
    echo "üßπ Executando cleanup..."
    if [ -n "$CURRENT_PROJECT_DIR" ] && [ -d "$CURRENT_PROJECT_DIR" ]; then
        cd "$CURRENT_PROJECT_DIR"
        echo "   Parando containers do projeto..."
        $DOCKER_COMPOSE_CMD down -v >/dev/null 2>&1
    fi
    echo "‚úÖ Cleanup conclu√≠do"
    exit 0
}

# Configurar trap para cleanup
trap cleanup SIGINT SIGTERM

# Fun√ß√£o para executar demonstra√ß√£o de um projeto
demo_project() {
    local project_dir=$1
    local project_name=$2
    
    echo ""
    echo "üöÄ Demonstrando: $project_name"
    echo "========================================"
    
    local full_path="$WORKSHOP_DIR/$project_dir"
    
    if [ ! -d "$full_path" ]; then
        echo "‚ùå Diret√≥rio $full_path n√£o encontrado"
        return 1
    fi
    
    cd "$full_path" || {
        echo "‚ùå N√£o foi poss√≠vel acessar $full_path"
        return 1
    }
    
    CURRENT_PROJECT_DIR="$full_path"
    
    echo "üìç Diret√≥rio atual: $(pwd)"
    echo "üìã Conte√∫do do projeto:"
    ls -la
    
    # Verificar se portas est√£o dispon√≠veis
    echo ""
    echo "üîç Verificando portas..."
    if ! check_port 8000 || ! check_port 8001; then
        echo "   Alguma porta do Kong est√° em uso. Deseja continuar? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "   Pulando projeto $project_name"
            return 0
        fi
    fi
    
    echo ""
    echo "‚ö° Subindo ambiente..."
    if ! $DOCKER_COMPOSE_CMD up -d; then
        echo "‚ùå Falha ao subir ambiente do projeto $project_name"
        return 1
    fi
    
    echo ""
    if wait_for_kong; then
        echo "üîç Status do Kong:"
        if [ "$JQ_AVAILABLE" = true ]; then
            curl -s http://localhost:8001/status | jq
        else
            curl -s http://localhost:8001/status
        fi
    else
        echo "‚ö†Ô∏è  Kong n√£o est√° respondendo, mas continuando..."
    fi
    
    echo ""
    echo "üìñ Para continuar com este projeto:"
    echo "   cd $full_path"
    echo "   cat README.md"
    
    echo ""
    echo "Pressione ENTER para parar este projeto e continuar..."
    read
    
    echo "üõë Parando ambiente..."
    $DOCKER_COMPOSE_CMD down -v
    CURRENT_PROJECT_DIR=""
    echo "‚úÖ Projeto $project_name finalizado"
}

# Executar demonstra√ß√µes
echo ""
echo "üé¨ Iniciando demonstra√ß√µes dos projetos b√°sicos..."
echo "=================================================="

demo_project "01-basic-proxy" "Kong B√°sico - Proxy Simples"
demo_project "02-authentication" "Autentica√ß√£o (Key Auth & JWT)"
demo_project "03-rate-limiting" "Rate Limiting e Controle de Tr√°fego"
demo_project "04-load-balancing" "Load Balancing e Health Checks"
demo_project "05-transformations" "Transforma√ß√µes de Request/Response"
demo_project "06-observability" "Observabilidade - Logging e Monitoramento"

echo ""
echo "üéì Projetos avan√ßados requerem configura√ß√£o adicional:"
echo "========================================================"
echo ""
echo "üîß Plugin Customizado:"
echo "   cd $WORKSHOP_DIR/07-custom-plugin"
echo "   docker build -t kong-custom ."
echo "   $DOCKER_COMPOSE_CMD up -d"
echo ""
echo "üêπ Lua Deep Dive:"  
echo "   cd $WORKSHOP_DIR/08-lua-deep-dive"
echo "   docker build -t kong-lua ."
echo "   $DOCKER_COMPOSE_CMD up -d"
echo ""
echo "üöÄ Go Plugin:"
echo "   cd $WORKSHOP_DIR/09-go-plugin"
echo "   $DOCKER_COMPOSE_CMD up -d  # Build autom√°tico via docker-compose"
echo "   ./performance-test.sh  # Teste de performance"
echo ""
echo "üîó Lua Embedding em Go:"
echo "   cd $WORKSHOP_DIR/10-lua-embedding/go-lua-host"
echo "   go run main.go basic     # Exemplo b√°sico"
echo "   go run main.go config    # Configura√ß√£o din√¢mica"
echo "   go run main.go plugins   # Sistema de plugins"
echo "   go run main.go sandbox   # Sandbox e seguran√ßa"
echo "   go run main.go benchmark # Performance comparisons"
echo ""

echo "üéâ Demonstra√ß√£o completa!"
echo "========================="
echo ""
echo "üìö Para usar individualmente:"
echo "   cd $WORKSHOP_DIR/<projeto>"
echo "   $DOCKER_COMPOSE_CMD up -d"
echo "   # Seguir instru√ß√µes no README.md"
echo "   $DOCKER_COMPOSE_CMD down -v"
echo ""
echo "üí° Dicas para a palestra:"
echo "   - Cada projeto √© independente"
echo "   - Demonstre conceitos de forma progressiva"  
echo "   - Use os scripts demo.sh quando dispon√≠veis"
echo "   - Mostre tanto configura√ß√£o declarativa quanto Admin API"
echo "   - Enfatize casos de uso reais"
echo ""
echo "üÜò Em caso de problemas:"
echo "   - Verifique se Docker est√° rodando"
echo "   - Limpe containers: $DOCKER_COMPOSE_CMD down -v"
echo "   - Libere portas: docker ps para verificar containers ativos"
