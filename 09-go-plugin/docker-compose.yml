version: '3.8'

services:
  # Redis for rate limiting
  redis:
    image: redis:7-alpine
    container_name: kong-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL for Kong
  kong-database:
    image: postgres:14-alpine
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong database migration
  kong-migrations:
    image: kong/kong-gateway:3.4.0
    container_name: kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    restart: on-failure
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy

  # Go Plugin Server
  go-plugin:
    build:
      context: ./go-plugin
      dockerfile: Dockerfile
    container_name: go-plugin
    environment:
      KONG_PLUGIN_LISTEN: "0.0.0.0:8002"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8002:8002"
    networks:
      - kong-net
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./go-plugin:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Gateway
  kong:
    image: kong/kong-gateway:3.4.0
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PLUGINS: bundled,advanced-validator-go
      KONG_PLUGINSERVER_NAMES: advanced-validator-go
      KONG_PLUGINSERVER_ADVANCED_VALIDATOR_GO_SOCKET: /tmp/go-plugin.sock
      KONG_PLUGINSERVER_ADVANCED_VALIDATOR_GO_START_CMD: go-plugin:8002
      KONG_PLUGINSERVER_ADVANCED_VALIDATOR_GO_QUERY_CMD: go-plugin:8002
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
      - "8003:8002"  # Admin GUI
    networks:
      - kong-net
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      go-plugin:
        condition: service_healthy
    volumes:
      - ./kong.yml:/opt/kong/kong.yml:ro
    command: >
      sh -c "
        kong config init /opt/kong/kong.yml &&
        kong start --v
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3

  # Test service (httpbin for testing)
  httpbin:
    image: kennethreitz/httpbin:latest
    container_name: test-httpbin
    ports:
      - "8080:80"
    networks:
      - kong-net

volumes:
  postgres_data:
  redis_data:

networks:
  kong-net:
    driver: bridge
